// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Optional for OAuth users
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  preferences   UserPreferences?
  notificationSettings UserNotificationSetting[]
  
  // RFC: Expense and Group Management relations
  groupMemberships  GroupMember[]
  createdGroups     Group[]           @relation("GroupCreator")
  sentInvitations   GroupInvitation[] @relation("InvitationInviter")
  expensePayments   ExpensePayer[]    @relation("ExpensePayers")
  expenseSplits     ExpenseSplit[]
  expenseItemSplits ExpenseItemSplit[] @relation("ExpenseItemSplits")
  settlementsAsPayer Settlement[]     @relation("SettlementPayer")
  settlementsAsPayee Settlement[]     @relation("SettlementPayee")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id        String  @id @default(cuid())
  userId    String  @unique
  theme     String  @default("light") // "light", "dark", "system"
  
  // Localization preferences
  currency  String  @default("USD") // ISO 4217 currency codes (USD, EUR, GBP, etc.)
  timezone  String  @default("UTC") // IANA timezone (America/New_York, Europe/London, etc.)
  language  String  @default("en")  // ISO 639-1 language codes (en, es, fr, de, etc.)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationTemplate {
  id          String @id @default(cuid())
  key         String @unique // e.g., "expense_added", "group_invite"
  name        String // e.g., "Expense Added"
  description String // e.g., "When someone adds a new expense"
  category    String // e.g., "expenses", "groups", "news"
  
  // Default settings for new users
  defaultEmail Boolean @default(true)
  defaultPush  Boolean @default(true)
  
  // Whether this notification type is mandatory
  required     Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserNotificationSetting {
  id           String @id @default(cuid())
  userId       String
  templateKey  String // References NotificationTemplate.key
  
  emailEnabled Boolean @default(true)
  pushEnabled  Boolean @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, templateKey])
}

// RFC: Group Management Models
model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?

  // Group settings
  currency    String   @default("USD")
  isActive    Boolean  @default(true)

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  // Relations
  creator     User           @relation("GroupCreator", fields: [createdBy], references: [id])
  members     GroupMember[]
  invitations GroupInvitation[]
  expenses    Expense[]
  settings    GroupSetting[]
  settlements Settlement[]

  @@index([createdBy])
  @@index([isActive])
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isActive  Boolean  @default(true)

  // Relations
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([userId])
  @@index([groupId, isActive])
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

model GroupSetting {
  id      String @id @default(cuid())
  groupId String
  key     String
  value   String

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, key])
}

model GroupInvitation {
  id        String   @id @default(cuid())
  email     String
  groupId   String
  role      GroupRole @default(MEMBER)
  token     String   @unique @default(cuid())
  
  invitedBy String
  inviter   User     @relation("InvitationInviter", fields: [invitedBy], references: [id])
  
  expiresAt DateTime
  acceptedAt DateTime?
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([email, groupId])
  @@index([token])
  @@index([email])
  @@index([groupId])
  @@index([expiresAt])
}

// RFC: Expense Management Models
model Expense {
  id          String   @id @default(cuid())

  // Basic expense info
  amount      Decimal  @db.Decimal(10, 2)
  description String
  date        DateTime @default(now())
  category    ExpenseCategory?

  // Group association (optional for personal expenses)
  groupId     String?

  // Split configuration (for simple expenses)
  splitMethod SplitMethod @default(EQUAL)

  // Receipt and notes
  notes       String?
  receiptUrls String[] // Array of receipt image URLs

  // Status tracking
  isSettled   Boolean  @default(false)
  isDeleted   Boolean  @default(false)

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group       Group?         @relation(fields: [groupId], references: [id])
  payers      ExpensePayer[] // Multiple payers support
  splits      ExpenseSplit[] // For simple expenses
  items       ExpenseItem[]  // For itemized expenses
  settlements Settlement[]

  @@index([groupId])
  @@index([date])
  @@index([isDeleted])
  @@index([isSettled])
}

model ExpensePayer {
  id          String  @id @default(cuid())
  expenseId   String
  userId      String

  // Amount this user paid towards the expense
  amountPaid  Decimal @db.Decimal(10, 2)

  // Payment method and reference
  paymentMethod String? // e.g., "Credit Card", "Cash", "Venmo"
  paymentRef    String? // e.g., transaction ID, check number

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  expense     Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User    @relation("ExpensePayers", fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@index([userId])
  @@index([expenseId])
}

enum SplitMethod {
  EQUAL       // Split equally among participants
  EXACT       // Exact amounts specified
  PERCENTAGE  // Percentage-based split
  SHARES      // Share-based split (e.g., 2:3:1 ratio)
}

enum ExpenseCategory {
  FOOD_DRINK
  TRANSPORTATION
  ACCOMMODATION
  ENTERTAINMENT
  SHOPPING
  UTILITIES
  HEALTHCARE
  EDUCATION
  TRAVEL
  OTHER
}

model ExpenseSplit {
  id          String  @id @default(cuid())
  expenseId   String
  userId      String

  // Split details
  amount      Decimal @db.Decimal(10, 2)
  percentage  Decimal? @db.Decimal(5, 2) // For percentage splits
  shares      Int?    // For share-based splits

  // Settlement status
  isSettled   Boolean @default(false)
  settledAt   DateTime?

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  expense     Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id])
  settlements Settlement[]

  @@unique([expenseId, userId])
  @@index([userId])
  @@index([isSettled])
}

model ExpenseItem {
  id          String  @id @default(cuid())
  expenseId   String

  // Item details
  name        String  // "Alice's burger", "Shared appetizer"
  description String? // Additional details about the item
  amount      Decimal @db.Decimal(10, 2)
  quantity    Int     @default(1)
  unitPrice   Decimal? @db.Decimal(10, 2)

  // Item categorization
  category    String? // "Food", "Tax", "Tip", "Service"
  isShared    Boolean @default(false) // Whether this item is shared among multiple people

  // Split configuration for this item
  splitMethod SplitMethod @default(EQUAL)

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  expense     Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  splits      ExpenseItemSplit[]

  @@index([expenseId])
  @@index([isShared])
}

model ExpenseItemSplit {
  id          String  @id @default(cuid())
  itemId      String
  userId      String

  // Split details for this specific item
  amount      Decimal @db.Decimal(10, 2)
  percentage  Decimal? @db.Decimal(5, 2) // For percentage splits
  shares      Int?    // For share-based splits

  // Settlement status for this item split
  isSettled   Boolean @default(false)
  settledAt   DateTime?

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item        ExpenseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user        User        @relation("ExpenseItemSplits", fields: [userId], references: [id])

  @@unique([itemId, userId])
  @@index([userId])
  @@index([isSettled])
}

// RFC: Settlement System
model Settlement {
  id          String   @id @default(cuid())

  // Settlement details
  amount      Decimal  @db.Decimal(10, 2)
  description String?

  // Parties involved
  payerId     String   // Who paid
  payeeId     String   // Who received payment

  // Related expense (optional - can be general settlement)
  expenseId   String?
  splitId     String?

  // Group context
  groupId     String?

  // Settlement method
  method      SettlementMethod @default(CASH)

  // External reference (e.g., Venmo transaction ID)
  externalRef String?

  // Status
  status      SettlementStatus @default(PENDING)
  confirmedAt DateTime?

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  payer       User     @relation("SettlementPayer", fields: [payerId], references: [id])
  payee       User     @relation("SettlementPayee", fields: [payeeId], references: [id])
  expense     Expense? @relation(fields: [expenseId], references: [id])
  split       ExpenseSplit? @relation(fields: [splitId], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])

  @@index([payerId])
  @@index([payeeId])
  @@index([groupId])
  @@index([status])
  @@index([createdAt])
}

enum SettlementMethod {
  CASH
  VENMO
  PAYPAL
  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}

enum SettlementStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}
