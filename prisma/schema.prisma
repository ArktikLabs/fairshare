// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                    @id @default(cuid())
  name                 String?
  email                String?                   @unique
  emailVerified        DateTime?
  image                String?
  password             String? // Optional for OAuth users
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  accounts             Account[]
  sessions             Session[]
  authenticators       Authenticator[]
  preferences          UserPreferences?
  notificationSettings UserNotificationSetting[]
  expenseCategories    ExpenseCategory[]
  expensesCreated      Expense[]                 @relation("ExpensesCreated")
  expensesPaid         Expense[]                 @relation("ExpensesPaid")
  expenseParticipants  ExpenseParticipant[]
  expenseAttachments   ExpenseAttachment[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  theme  String @default("light") // "light", "dark", "system"

  // Localization preferences
  currency String @default("USD") // ISO 4217 currency codes (USD, EUR, GBP, etc.)
  timezone String @default("UTC") // IANA timezone (America/New_York, Europe/London, etc.)
  language String @default("en") // ISO 639-1 language codes (en, es, fr, de, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationTemplate {
  id          String @id @default(cuid())
  key         String @unique // e.g., "expense_added", "group_invite"
  name        String // e.g., "Expense Added"
  description String // e.g., "When someone adds a new expense"
  category    String // e.g., "expenses", "groups", "news"

  // Default settings for new users
  defaultEmail Boolean @default(true)
  defaultPush  Boolean @default(true)

  // Whether this notification type is mandatory
  required Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNotificationSetting {
  id          String @id @default(cuid())
  userId      String
  templateKey String // References NotificationTemplate.key

  emailEnabled Boolean @default(true)
  pushEnabled  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateKey])
}

model ExpenseCategory {
  id          String  @id @default(cuid())
  ownerId     String
  parentId    String?
  name        String
  icon        String?
  color       String?
  description String?
  scope       String? // e.g., "global", "personal", "group"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parent              ExpenseCategory?     @relation("ExpenseCategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children            ExpenseCategory[]    @relation("ExpenseCategoryHierarchy")
  expenseParticipants ExpenseParticipant[]
  Expense             Expense[]

  @@unique([ownerId, parentId, name])
  @@index([parentId])
}

model Expense {
  id                String    @id @default(cuid())
  description       String
  notes             String?
  amount            Decimal   @db.Decimal(12, 2)
  currency          String    @default("USD")
  occurredAt        DateTime
  dueAt             DateTime?
  splitMethod       String    @default("equal") // e.g., "equal", "exact", "percentage"
  status            String    @default("active") // e.g., "active", "pending", "settled", "archived"
  expenseCategoryId String?
  paidByUserId      String
  createdByUserId   String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  paidByUser      User                 @relation("ExpensesPaid", fields: [paidByUserId], references: [id], onDelete: Cascade)
  createdByUser   User                 @relation("ExpensesCreated", fields: [createdByUserId], references: [id], onDelete: Cascade)
  participants    ExpenseParticipant[]
  attachments     ExpenseAttachment[]
  ExpenseCategory ExpenseCategory?     @relation(fields: [expenseCategoryId], references: [id])

  @@index([occurredAt])
  @@index([status])
  @@index([expenseCategoryId])
}

model ExpenseParticipant {
  id              String    @id @default(cuid())
  expenseId       String
  userId          String
  categoryId      String?
  shareAmount     Decimal?  @db.Decimal(12, 2)
  sharePercentage Decimal?  @db.Decimal(5, 2)
  paidAmount      Decimal   @default(0) @db.Decimal(12, 2)
  settled         Boolean   @default(false)
  settledAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  expense     Expense             @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    ExpenseCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  attachments ExpenseAttachment[]

  @@unique([expenseId, userId])
  @@index([userId])
  @@index([categoryId])
}

model ExpenseAttachment {
  id                   String   @id @default(cuid())
  expenseId            String
  uploadedByUserId     String?
  expenseParticipantId String?
  url                  String?
  metadata             Json?
  createdAt            DateTime @default(now())

  expense            Expense             @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  uploadedBy         User?               @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  ExpenseParticipant ExpenseParticipant? @relation(fields: [expenseParticipantId], references: [id])

  @@index([expenseId])
}
